apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion target_sdk_version
    defaultConfig {
        applicationId "moe.haruue.ep"
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode version_code
        versionName version_name
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "SERVER_URL", "\"$server_base_url\""
    }
    dataBinding {
        enabled true
    }
    signingConfigs {
        sign
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.sign
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.sign
        }
    }
}

kapt {
    generateStubs = true
}

dependencies {
    testImplementation 'junit:junit:4.12'
    testImplementation "android.arch.core:core-testing:$architecture_version"
    testImplementation "android.arch.persistence.room:testing:$room_version"
    //noinspection GradleCompatible
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':common')
    kapt "android.arch.lifecycle:compiler:$architecture_version"
    kapt "android.arch.persistence.room:compiler:$room_version"
    kapt "com.android.databinding:compiler:$android_plugin_version"
    implementation "com.amap.api:navi-3dmap:$amap_version"
    implementation "com.amap.api:search:$amap_version"
    implementation "com.amap.api:location:$amap_version"
    implementation "com.oasisfeng.condom:library:$condom_version"
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"
}

def signFile = rootProject.file('signing.properties')
def signProps = new Properties()
if (signFile.canRead()) {
    signProps.load(new FileInputStream(signFile))
    if (signProps != null) {
        android.signingConfigs.sign.storeFile file(signProps['KEYSTORE_FILE'])
        android.signingConfigs.sign.storePassword signProps['KEYSTORE_PASSWORD']
        android.signingConfigs.sign.keyAlias signProps['KEYSTORE_ALIAS']
        android.signingConfigs.sign.keyPassword signProps['KEYSTORE_ALIAS_PASSWORD']
    } else {
        println 'some entries in \'signing.properties\' not found!'
    }
} else {
    println '\'signing.properties\' not found!'
}

def keyFile = project.file('key.properties')
def keyProps = new Properties()
if (keyFile.canRead()) {
    keyProps.load(new FileInputStream(keyFile))
    if (keyProps != null) {
        android.defaultConfig.manifestPlaceholders.put("AMAP_API_KEY", keyProps['amap.apikey'])
    } else {
        throw new IllegalStateException(
                """
Please config amap sdk
See: http://lbs.amap.com/api/android-sdk/gettingstarted
Register a amap account and download the sdk file into client/libs,
and put your amap apikey into client/key.properites like

    amap.apikey=YOUR_API_KEY_HERE
""")
    }
} else {
    throw new IllegalStateException(
            """
Please config amap sdk
See: http://lbs.amap.com/api/android-sdk/gettingstarted
Register a amap account and download the sdk file into client/libs,
and put your amap apikey into client/key.properites like

    amap.apikey=YOUR_API_KEY_HERE
""")
}